@using Services
@using Model
@inject ISimuladorColasEsperaService simulador
@inject IJSRuntime JSRuntime

<main class="animate__animated animate__fadeIn">

    <div class="container-fluid text-center" style="transition: height 0.5s ease;">
        <!-- CONTAINER DE MAIN-->
        <div class="row">
            @if (!string.IsNullOrEmpty(AlertMessage))
            {
                <div class="col-12">
                    <div class="alert alert-danger" role="alert">
                        @AlertMessage
                    </div>
                </div>
            }
            <!-- Todo el contenido de la vista main -->
            <div class="col-sm-4 p-0">
                <div class="p-3 mb-3 contenedor_Datos container-fluids">

                    <div class="row">
                        <div class="col">
                            <h3>Ingreso esperado</h3>
                        </div>
                    </div>

                    <div class="row d-flex align-items-center justify-content-center">
                        <div class="col-5 text-left d-flex align-items-center">
                            <p>Ingreso esperado: </p>
                        </div>
                        <div class="col-7">
                            <RadzenLabel>Ingrese el monto esperado mensual medido en millónes de dólares</RadzenLabel>
                            <input @bind="IngresosEsperados" @bind:event="oninput" class="w-100" type="number" name="quantity" min="650000" max="100000000" step="10000">
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block rounded-3 w-100 botondeSimular" @onclick="HandleButtonClick">Simular</button>
                            @*<button class="btn btn-primary btn-block rounded-3 w-100 botondeSimular" @onclick="HandleButtonMensualClick">Promedio Mensual</button>*@
                        </div>
                    </div>

                </div>

                <div class="p-1 mb-1 contenedor_Datos container-fluids" style="height:270px;">
                    <div class="row">
                        <div class="col">
                            <h3>Función</h3>
                        </div>
                    </div>
                    <div class="row">
                        <!--ROW DE FUNCION -->
                        <div class="col">
                            <canvas id="myChart"></canvas>
                            <p>Cantidad de Visitantes</p>
                        </div>
                    </div> <!--CIERRE ROW DE FUNCION -->
                </div>

            </div> <!--CIERRE COL 1 DE INPUTS-->


            <div class="col-sm-4 p-1">
                <!-- COL DE FUNCION -->

                <div class="row" style="padding-left:15px; padding-right:15px;">
                    <!--ROW DE FUNCION -->
                    <div class="contenedor_Datos text-center contenedorRespuesta mb-2"
                         style="transition: height 0.5s ease; display:block; min-height:100px">
                        <p>@Estado</p>
                        <p>@Respuesta</p>
                    </div>

                    <div class="col contenedor_Tabla">
                        <RadzenHeading Size="H3" Text="Tabla Tiempos De Espera"></RadzenHeading>

                        <div>
                            <RadzenButton Icon="arrow_left" Click="@(args => ChangeDate(-1))"
                                          Style="background-color: #1b6ec2;"></RadzenButton>
                            <RadzenDatePicker @bind-Value="selectedDate" DateFormat="dd/MM" Change="@(args => OnDateChanged(args))" Style="margin: 0 10px; text-align: center; justify-content:center" ReadOnly></RadzenDatePicker>
                            <RadzenButton Icon="arrow_right" Click="@(args => ChangeDate(1))"
                                          Style="background-color:#1b6ec2;"></RadzenButton>
                        </div>


                        @if (tiemposDeEsperaFiltrados != null && tiemposDeEsperaFiltrados.Any())
                        {
                            var hours = tiemposDeEsperaFiltrados.First().TiempoEspera.Keys.Select(k => k.Hour).Distinct().OrderBy(h => h);
                            <table class="table">
                                <colgroup>
                                    <col style="width: auto;">
                                    <col style="width: auto;">
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th>Hora</th>
                                        @foreach (var dato in tiemposDeEsperaFiltrados)
                                        {
                                            <th>@dato.Nombre (min)</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var hour in hours)
                                    {
                                        <tr>
                                            <td>@(hour+8):00</td>
                                            @foreach (var dato in tiemposDeEsperaFiltrados)
                                            {
                                                if (dato.TiempoEspera.TryGetValue(new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, hour, 0, 0), out var tiempo))
                                                {
                                                    <td>@tiempo.ToString("#") </td>
                                                }
                                                else
                                                {
                                                    <td>-</td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        }
                    </div>


                </div> <!--CIERRE ROW DE FUNCION -->
            </div> <!--CIERRE COL DE FUNCION -->
            <div class="col-sm-4 p-0">
                <div class="p-2 contenedor_Datos d-none d-md-block">
                    <!-- COL 3 DE MAPA -->
                    <div class="row">
                        <!-- ROW 1 DE STAR WARS TITULO -->
                        <div class="col" style="text-align: center;">
                            <h3>Star Wars Galaxy's Edge</h3>
                        </div> <!--CIERRE COL 1 DE STAR WARS TITULO -->
                    </div> <!--CIERRE ROW 1 DE STAR WARS TITULO -->

                    <div class="row">
                        <!-- ROW 2 DE MAPA DE STAR WARS -->
                        <div class="col">

                            <div class="image-container">
                                <img style="width:380px;height:420px; border-radius:20px;" src="Images/ImagenMapa.jpg" alt="">
                                @if (TiemposDeEspera.Count() != 0)
                                {
                                    <div class="comment-bubble comment-MF">
                                        <p>Tiempo de Espera en Millenium Falcon: @TiempoEsperaPromedioMF.ToString("#.#")</p>
                                    </div>
                                    <div class="comment-bubble comment-RR">
                                        <p>Tiempo de Espera en Rise of the Resistance: @TiempoEsperaPromedioRR.ToString("#.#")</p>
                                    </div>
                                }
                            </div>

                        </div> <!--CIERRE COL 1 DE MAPA DE STAR WARS  -->
                    </div> <!--CIERRE ROW 2 DE MAPA DE STAR WARS  -->
                </div>
            </div> <!--CIERRE COL 3 DE MAPA -->
        </div> <!-- CIERRE DE ROW QUE CONTIENE A TODO EL MAIN-->
    </div> <!-- CIERRE DE CONTAINER DE MAIN-->
</main>



@code {
    public double IngresosEsperados { get; set; }
    public String Respuesta { get; set; } = String.Empty;
    public String Estado { get; set; } = "Esperando...";
    public string AlertMessage { get; set; }
    public IEnumerable<DatoEspera> TiemposDeEspera { get; set; } = new List<DatoEspera>();
    IEnumerable<DatoEspera> tiemposDeEsperaFiltrados;
    DateTime selectedDate = DateTime.Today;
    const int PrecioEntrada = 109;
    public double TiempoEsperaPromedio { get; set; }
    public double TiempoEsperaPromedioRR { get; set; }
    public double TiempoEsperaPromedioMF { get; set; }    
    public double TiempoEsperaPromedioMensual { get; set; }
    public double TiempoEsperaPromedioRRMensual { get; set; }
    public double TiempoEsperaPromedioMFMensual { get; set; }
    public IEnumerable<DatoEspera> TiemposDeEsperaPromedioMensual { get; set; } = new List<DatoEspera>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        OnDateChanged(selectedDate);
    }

    async void OnDateChanged(DateTime? date)
    {
        if (date.HasValue)
        {
            selectedDate = date.Value;
            tiemposDeEsperaFiltrados = TiemposDeEspera.Where(d => d.TiempoEspera.Keys.Any(k => k.Date == selectedDate.Date));
            if (tiemposDeEsperaFiltrados.Any())
            {
                TiempoEsperaPromedioRR = tiemposDeEsperaFiltrados
                .FirstOrDefault(a => a.Nombre == "RR")?
                .TiempoEspera
                .Where(k => k.Key.Date == selectedDate.Date)
                .DefaultIfEmpty()
                .Average(t => t.Value) ?? 0;

                TiempoEsperaPromedioMF = tiemposDeEsperaFiltrados
                .FirstOrDefault(a => a.Nombre == "MF")?
                .TiempoEspera
                .Where(k => k.Key.Date == selectedDate.Date)
                .DefaultIfEmpty()
                .Average(t => t.Value) ?? 0;
                TiempoEsperaPromedio = (TiempoEsperaPromedioMF + TiempoEsperaPromedioRR);
                await JSRuntime.InvokeVoidAsync("plotFunction", TiempoEsperaPromedio);
            }
        }
    }

    void ChangeDate(int days)
    {
        if (selectedDate.AddDays(days).Month != selectedDate.Month)
        {
            selectedDate = new DateTime(selectedDate.Year, selectedDate.Month, 1);
        }
        else
        {
            selectedDate = selectedDate.AddDays(days);
        }

        OnDateChanged(selectedDate);
    }
    private async Task HandleButtonClick2()
    {
        IGeneradorService g = new GeneradorService();   
        IDistribucionesService d = new DistribucionesService(g);
        List<double> l = new();
        int i = 1;
        while (i <90000000)
        {
            var n = d.GenerarNumeroAleatorio();
            l.Add(n);
            Console.WriteLine(n);
            i++;
            Console.WriteLine($"Promedio: { l.Average()}");
        }
    }


    private async Task HandleButtonClick()
    {
        Estado = "Simulando...";
        if (IngresosEsperados > 175 || IngresosEsperados <0)
        {
            //mostrar mensaje de error 
            AlertMessage = "El ingreso esperado supera el límite. Por favor ingrese un valor menor.";
            Estado = "Error en la entrada.";
            return;
        }
        var simulacionResult = await simulador.Simular((int)IngresosEsperados*1000000);
        Respuesta = simulacionResult.Item1;
        TiemposDeEspera = simulacionResult.Item2;

        TiempoEsperaPromedioRRMensual = TiempoEsperaPromedioRR = TiemposDeEspera.FirstOrDefault(a => a.Nombre == "RR")?.TiempoEspera.Where(t => t.Value > 0).DefaultIfEmpty().Average(t => t.Value) ?? 0;
        TiempoEsperaPromedioMFMensual = TiempoEsperaPromedioMF = TiemposDeEspera.FirstOrDefault(a => a.Nombre == "MF")?.TiempoEspera.Where(t => t.Value > 0).DefaultIfEmpty().Average(t => t.Value) ?? 0;
        TiempoEsperaPromedioMensual = TiempoEsperaPromedio = simulacionResult.Item3;

        if (string.IsNullOrEmpty(Respuesta))
        {
            Estado = "Error: No se recibió respuesta.";
        }
        else
        {
            Estado = "Simulación completada.";
        }

        await JSRuntime.InvokeVoidAsync("plotFunction", TiempoEsperaPromedio);
        OnDateChanged(selectedDate);
    }
    
    private async Task HandleButtonMensualClick()// a implementar en la proxima iteracion
    {
        TiempoEsperaPromedioRR = TiempoEsperaPromedioRRMensual;
        TiempoEsperaPromedioMF = TiempoEsperaPromedioMFMensual;
        TiempoEsperaPromedio = TiempoEsperaPromedioMensual;

        await JSRuntime.InvokeVoidAsync("plotFunction", TiempoEsperaPromedio);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("plotFunction");
        }
    }
}



