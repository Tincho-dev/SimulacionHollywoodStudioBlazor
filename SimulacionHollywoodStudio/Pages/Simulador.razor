@using Services
@using Model
@inject ISimuladorColasEsperaService simulador

<main class="animate__animated animate__fadeIn">
    <div class="contenedor_Datos text-center contenedorRespuesta mb-1" style="transition: height 0.5s ease; display:block;">
        <p>@Estado</p>
        <p>@Respuesta</p>
    </div>
    <div class="container-fluid text-center" style="transition: height 0.5s ease;">
        <!-- CONTAINER DE MAIN-->
        <div class="row">
            <!-- Todo el contenido de la vista main -->
            <div class="col-sm-3 p-0">
                <div class="p-3 mb-1 contenedor_Datos container-fluids">
                    <div class="">
                        <InputTemporadaFecha></InputTemporadaFecha>
                        <hr> <!-- SEPARADOR DE FECHA/TEMPORADA Y CANTIDAD DE VISITANTES -->
                        <InputCantidadDeVisitantes></InputCantidadDeVisitantes>
                        <div class="row d-flex align-items-center justify-content-center">
                            <div class="col-5 text-left d-flex align-items-center">
                                <p>Ingreso esperado: </p>
                            </div>
                            <div class="col-7">
                                <input @bind="IngresosEsperados" @bind:event="oninput" class="w-100" type="number" name="quantity" min="0" max="100" step="1">
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-12">
                                <button class="btn btn-primary btn-block rounded-3 w-100 botondeSimular" @onclick="HandleButtonClick">Simular</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div> <!--CIERRE COL 1 DE INPUTS-->
            <div class="col-sm-4 p-1">
                <!-- COL DE FUNCION -->
                <div class="p-2 mb-1 contenedor_Datos container-fluids">
                    <div class="row">
                        <div class="col" >
                            <h3>Función</h3>
                        </div>
                    </div> 
                    <div class="row">
                        <!--ROW DE FUNCION -->
                        <div class="col">
                                <ConteinerFuncion></ConteinerFuncion>
                            <p>Cantidad de Visitantes</p>
                        </div>
                    </div> <!--CIERRE ROW DE FUNCION -->
                </div>
                <div class="row" style="padding-left:15px; padding-right:15px;">
                        <!--ROW DE FUNCION -->
                        <div class="col contenedor_Tabla">
                        <TablaTiemposDeEspera tiemposDeEspera="@tiemposDeEspera"></TablaTiemposDeEspera>
                    </div>
                    </div> <!--CIERRE ROW DE FUNCION -->
            </div> <!--CIERRE COL DE FUNCION -->
            <div class="col-sm-5 p-0">
                <div class="p-2 contenedor_Datos">
                <!-- COL 3 DE MAPA -->
                <ConteinerMapa></ConteinerMapa>
                    @*<TablaTiemposDeEspera></TablaTiemposDeEspera>*@
                </div>
            </div> <!--CIERRE COL 3 DE MAPA -->
        </div> <!-- CIERRE DE ROW QUE CONTIENE A TODO EL MAIN-->
    </div> <!-- CIERRE DE CONTAINER DE MAIN-->
</main>



@code {
    [Parameter]
    public EventCallback<IEnumerable<DatoEspera>> OnSimulationComplete { get; set; }
    public double IngresosEsperados { get; set; }
    public String Respuesta { get; set; }
    public String Estado { get; set; } = "Esperando...";
    public IEnumerable<DatoEspera> tiemposDeEspera { get; set; }

    private async Task HandleButtonClick()
    {
        Estado = "Simulando...";
        var simulacionResult = await simulador.Simular((int)IngresosEsperados);
        Respuesta = simulacionResult.Item1;
        tiemposDeEspera = simulacionResult.Item2;

        if (string.IsNullOrEmpty(Respuesta))
        {
            Estado = "Error: No se recibió respuesta.";
        }
        else
        {
            Estado = "Simulación completada.";
        }
        await OnSimulationComplete.InvokeAsync(simulacionResult.Item2);
    }
}



