@using Services
@using Model
@inject ISimuladorColasEsperaService simulador

<!-- Colocar este fragmento donde quieras que se muestre el estado -->
<div class="row">
    <div class="col">
        <p>@Estado</p>
    </div>
</div>

<!-- Asegúrate de que 'Respuesta' se muestra en algún lugar -->
<div class="row">
    <div class="col">
        <p>@Respuesta</p>
    </div>
</div>

<main>
    <div class="container"> <!-- CONTAINER DE MAIN-->
        <div class="container-principal container-fluid"> <!-- DIV DE CONTAINER PRINCIPAL: CONTIENE COLUMNA DE DATOS,FUNCIÓN Y MAPA -->
            <div class="row"> <!-- ROW 2 DE CONTENIDO>: CONTIENE DATOS  -->
                <div class="col-sm-4">
                    <!-- COL 1 DE INPUTS (UNICA COL DEL ROW)-->
                    <div class="contenedor_Datos">
                        <!-- CONTAINER DE INPUTS -->
                        <div class="p-3">
                            @*<InputTemporadaFecha></InputTemporadaFecha>*@
                            <hr> <!-- SEPARADOR DE FECHA/TEMPORADA Y CANTIDAD DE VISITANTES -->
                            @*<InputCantidadDeVisitantes></InputCantidadDeVisitantes>*@
                            <div class="row d-flex align-items-center justify-content-center">
                                <div class="col-5 text-left d-flex align-items-center">
                                    <p>Ingreso esperado: </p>
                                </div>
                                <div class="col-7">
                                    <input @bind="IngresosEsperados" @bind:event="oninput" class="w-100" type="number" name="quantity" min="0" max="100" step="1">
                                </div>
                            </div>

                            <hr>
                            <div class="row">
                                <div class="col-12">
                                    <button class="btn btn-primary btn-block rounded-3 w-100" @onclick="HandleButtonClick">Simular</button>
                                </div>
                            </div>
                        </div>
                    </div> <!--CIERRE CONTAINER DE INPUTS -->
                </div> <!--CIERRE COL 1 DE INPUTS-->
                <div class="col-sm-4" style="text-align: center;">
                    <!--COL 2 DE GRAFICA-->
                    <div class="row">
                        <!--ROW 1 DE ENTRADA EN OFERTA -->
                        <div class="col" style="text-align: center;">
                        </div>
                    </div> <!--CIERRE ROW 1 DE ENTRADA EN OFERTA -->
                    <div class="row">
                        <!--ROW 2 DE IMAGEN -->
                        <div class="col">
                            <div class="container">
                                <ConteinerFuncion></ConteinerFuncion>
                            </div>
                        </div>
                    </div> <!--CIERRE ROW 2 DE IMAGEN -->
                    <div class="row">
                        <!-- ROW 3 DE CANTIDAD VISITANTES -->
                        <div class="col" style="text-align: center;">
                            <p>Cantidad de Visitantes</p>
                        </div>
                    </div> <!--CIERRE ROW 3 DE CANTIDAD VISITANTES -->
                </div> <!--CIERRE COL 2 DE GRAFICA-->
                <div class="col-sm-4">
                    <!-- COL 3 DE MAPA -->
                    @*<ConteinerMapa></ConteinerMapa>*@
                    <div class="p-3" style="height: 400px; overflow-y: scroll; border-radius: 20px;
                        border: 3px solid black; align-items: center; justify-content: center;">
                        <TablaTiemposDeEspera></TablaTiemposDeEspera>
                    </div>
                </div> <!--CIERRE COL 3 DE MAPA -->
            </div> <!--CIERRE ROW 2 DE CONTENIDO-->
        </div> <!-- CIERRE DE CONTAINER PRINCIPAL-->
    </div> <!-- CIERRE DE CONTAINER DE MAIN-->
</main>
<Footer></Footer>

@code {
    public double IngresosEsperados { get; set; }
    public String Respuesta { get; set; }
    public String Estado { get; set; } = "Esperando...";

    private async Task HandleButtonClick()
    {
        Console.WriteLine("El botón ha sido clickeado");
        Console.WriteLine(IngresosEsperados);

        Estado = "Simulando...";
        Respuesta = await simulador.SimularV2((int)IngresosEsperados);
        Console.WriteLine(Respuesta);

        if (string.IsNullOrEmpty(Respuesta))
        {
            Estado = "Error: No se recibió respuesta.";
        }
        else
        {
            Estado = "Simulación completada.";
        }
    }
}


