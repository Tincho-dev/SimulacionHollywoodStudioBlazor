@using Radzen
@using Radzen.Blazor
@using Model;
@using Services
@inject ISimuladorColasEsperaService simulador

<RadzenHeading Size="H3" Text="Tabla Tiempos De Espera"></RadzenHeading>

<div>
    <RadzenButton Icon="arrow_left" Click="@(args => ChangeDate(-1))"
                  Style="background-color: #1b6ec2;"></RadzenButton>
    <RadzenDatePicker @bind-Value="selectedDate" Change="@(args => OnDateChanged(args))" Style="margin: 0 10px;"></RadzenDatePicker>
    <RadzenButton Icon="arrow_right" Click="@(args => ChangeDate(1))"
                  Style="background-color:#1b6ec2;"></RadzenButton>
</div>


@if (tiemposDeEsperaFiltrados != null && tiemposDeEsperaFiltrados.Any())
{
    var hours = tiemposDeEsperaFiltrados.First().TiempoEspera.Keys.Select(k => k.Hour).Distinct().OrderBy(h => h);
    <table class="table">
        <colgroup>
            <col style="width: auto;">
            <col style="width: auto;">
        </colgroup>
            <thead>
                <tr>
                    <th>Hora</th>
                    @foreach (var dato in tiemposDeEsperaFiltrados)
                    {
                        <th>@dato.Nombre</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var hour in hours)
                {
                    <tr>
                        <td>@hour:00</td>
                        @foreach (var dato in tiemposDeEsperaFiltrados)
                        {
                            if (dato.TiempoEspera.TryGetValue(new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, hour, 0, 0), out var tiempo))
                            {
                            <td>@tiempo.ToString("#") min</td>
                            }
                            else
                            {
                                <td>-</td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    
}

@code {
    [Parameter]
    public IEnumerable<DatoEspera> tiemposDeEspera { get; set; }
    IEnumerable<DatoEspera> tiemposDeEsperaFiltrados;
    DateTime selectedDate = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        OnDateChanged(selectedDate);
    }

    void OnDateChanged(DateTime? date)
    {
        tiemposDeEspera = simulador.GetDatoEsperas();
        if (date.HasValue)
        {
            selectedDate = date.Value;
            tiemposDeEsperaFiltrados = tiemposDeEspera.Where(d => d.TiempoEspera.Keys.Any(k => k.Date == selectedDate.Date));
        }
    }

    void ChangeDate(int days)
    {
        selectedDate = selectedDate.AddDays(days);
        OnDateChanged(selectedDate);
    }
}
